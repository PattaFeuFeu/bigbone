plugins {
    id 'bigbone.java-conventions'
    id 'bigbone.kotlin-conventions'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

publishing {
    repositories {
        maven {
            name = "local"
            url = rootProject.file("build/repo")
        }
        maven {
            name = "mavenCentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.properties.containsKey("sonatypeUsername") ? sonatypeUsername : ""
                password = project.properties.containsKey("sonatypePassword") ? sonatypePassword : ""
            }
        }

    }
    publications {
        bigbone(MavenPublication) {
            pom {
                name = 'Bigbone'
                description = 'Mastodon Client for Java and Kotlin'
                url = 'https://github.com/andregasser/bigbone/'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'andregasser'
                        name = 'Andr√© Gasser'
                        email = 'andre.gasser@protonmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/andregasser/bigbone.git'
                    developerConnection = 'scm:git:ssh://github.com:andregasser/bigbone.git'
                    url = 'https://github.com/andregasser/bigbone'
                }
            }

            from components.java
        }
    }
}

signing {
    sign publishing.publications.bigbone
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(file("${layout.buildDirectory}/reports/jacoco"))
    }
}
